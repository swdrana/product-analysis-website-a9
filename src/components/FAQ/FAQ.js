import React from "react";
import "./FAQ.css";
const FAQ = () => {
  return (
    <div>
      <div className="faq">
        <h2>Context API কি এবং এর ব্যবহার বর্ণনা কর।</h2>
        <p>
          Context API হল React এর একটি নতুন ফিচার যেটা React v16.3 থেকে যুক্ত
          হয়েছে। এটি ব্যবহার করে সমগ্র React অ্যাপের মধ্যে কোন একটি State কে
          একবার লিখে সেটি শেয়ার করে বারবার ব্যবহার করা যাই। নিন্মে এ সম্পর্কে
          আরও বিস্তারিত আলোচনা করা হলঃ
        </p>
        <p>
          সাধারণত, আমরা কোন JSX Component থেকে ডাটা প্রেরণ ও গ্রহণ করার জন্য
          props ব্যবহার করি। প্যারেন্ট Component থেকে Attribute আকারে কোন value
          প্রেরণ করে তাকে Child Component এর প্যারামিটার থেকে props এর মাধ্যমে
          গ্রহণ করে থাকি। এভাবে ডাটা প্রেরণ ও গ্রহণ আপাত দৃষ্টিতে কোন সমস্যা মনে
          না হলেও বড় বড় প্রজেক্ট এর ক্ষেত্রে প্রায়শই এটা একটা বিরক্তকর সমস্যার
          সৃষ্টি করে। যেমনঃ আমি কোন Component এর ডাটাকে তার Child এর Child এর
          Child এর Child Component কে প্রেরণ করতে চাই, আমরা জানি এটার জন্য
          আমাদের প্রতিটা Component এ props গ্রহণ করে সেই ডাটাকে আবার তার Child
          কে প্রেরণ করতে হয় আর এভাবে চলতে থাকে যতক্ষণ আমাদের কাঙ্ক্ষিত গন্তব্যে
          পৌঁছাতে না পারি। একটু ভেবে দেখুন, ডাটা প্রেরণ করতে হবে একটা Component
          থেকে আরেকটা Component এ কিন্তু মাঝে অনেকগুলো প্যারেন্ট, চাইল্ড থাকার
          কারনে অযথা সময় নষ্ট, বেশি কোড ও কোডের জটিলতা বৃদ্ধির কারনে
          পারফারমেন্সেও সেটার প্রভাব ফেলে। এই সমস্যার সমাধান হিসেবে আসেঃ React
          এর Context API।
        </p>
        <p>
          Context API ব্যবহার করে খুব সহজে প্রতিটি Child এর মাধ্যমে props আকারে
          ডাটা কে না পাঠিয়ে সেই ডাটার জন্য একটি Context তৈরি করা হয়। একবার এই
          Context তৈরি করা হয়ে গেলে সেই Context টি কে প্রয়োজন মত যেকোনো
          Component থেকে ব্যবহার করা যাই।
        </p>
      </div>
      <div className="faq">
        <h2>Semantic Tag কি?</h2>
        <p>
        Semantic Tag বা Tag কথা আসলেই প্রথমে আমাদের মাথায় যেটি আসে তা হল HTML (হাইপার টেক্সট মার্কআপ ল্যাঙ্গুয়েজ)। আমরা জানি, HTML এর এখন পর্যন্ত HTML 5 এর আগে ছিল HTML 4। Semantic বা Semantic Tag এর উদ্ভব হয় মূলত HTML 5 এ। সহজ কথা Semantic Tag বলতে কাজের সাথে অর্থবোধক নামের অধিকারী Tag সমূহকে বুঝায়।
        </p>
        <p>
            HTML 4 এ আমরা div ট্যাগ ব্যবহার করতাম কোন ডিভিশন কে বুঝাতে। কিন্তু সমস্যা হলঃ আমাদের সেই একটা Tag দিয়েই একটি Website এর বিভিন্ন অংশকে বুঝাতে হত যদিও class Attribute ব্যবহার করে এটার সমস্যা কিছুটা লাঘব হয় কিন্তু তারপরও SEO ও Readablity এর ক্ষেত্রে সমস্যা গুলো থেকেই যাই। যেমনঃ একটা Website তৈরি করতে Heading, Section, Artical, Nav, Footer, Strong ইত্যাদি Tag এর প্রয়োজন হয়, কিন্তু আগে (HTML 4) এ এই সকল Tag গুলো ছিল না, ফলে একটা Webpage তৈরি করতে হলে প্রায় সবক্ষেত্রে div ব্যবহার করতে হত। 
        </p>
        <p>
            এই সমস্যা থেকে মুক্তি পেতে HTML 5 নতুন কিছু Tag এর উদ্ভাবিত হয় যেগুলোকে Semantic Tag হিসেবে অভিভূত করা হয়। এই ট্যাগ গুলো যেমন একজন Developer এর কোড Readablity বাড়ায় তেমনি এগুলো ব্যবহারের ফলে উক্ত Website টি Search Engeen Friendly হয়। ফলে Website টি খুব সহজে Search করে খুঁজে পাওয়া যাই এবং সহজে অধিক বাবহারকারীর কাছে সেবা পৌঁছান যাই। 
        </p>
      </div>
      {/* <div className="faq">
        <h2>Props ও State এর মধ্যে পার্থক্য কি?</h2>
        <p>
          Props ও State কে রিয়াক্ট এর খুবিই গুরুত্বপূর্ণ দুটি উপাদান বলা যাই।
          JSX এর মাধ্যমে তৈরিকৃত কম্পোনেন্টে ডাটা প্রেরণ করা ও User এর কাজের উপর
          নির্ভর করে Data পরিবর্তন করে দেখানো ক্ষেত্রে এ দুটির জুড়ি নাই! বিষয়
          দুটি আপাত দৃষ্টিতে দেখতে একই রকম দেখালেও এদের কাজের মধ্যে আছে অনেক
          তফাৎ। নিন্মে ছকের মাধ্যমে এ দুইয়ের পার্থক্য দেখানো হলঃ{" "}
        </p>
        <table>
          <thead>
            <tr>
              <th>Props</th>
              <th>State</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>
                Props হল read only অর্থাৎ ডাটা পেলে সেটিকে ব্যবহার করা যাবে
                কিন্তু পরিবর্তন করা যাবে না।{" "}
              </td>
              <td>State এর ডাটা পরিবর্তন যোগ্য।</td>
            </tr>
            <tr>
              <td>Props হয় immutable বা অপরিবর্তনীয়। </td>
              <td>State হল mutable বা পরিবর্তনযোগ্য। </td>
            </tr>
            <tr>
              <td>Props কে তার child component access করতে পারে।</td>
              <td>State কে তার child component access করতে পারে না। </td>
            </tr>
            <tr>
              <td>এটি components কে reusable (পুনারায় ব্যবহার) করতে পারে। </td>
              <td>
                এটি components কে reusable (পুনারায় ব্যবহার) করতে পারে না।
              </td>
            </tr>
            <tr>
              <td>Stateless component এ Props থাকতে পারে। </td>
              <td>Stateless component এ Props থাকতে পারে না। </td>
            </tr>
          </tbody>
        </table>
        <p>
          উপরিক্ত আলোচনার মাধ্যমে আমরা Props ও State সম্পর্কে সাধারণ কিছু তথ্য ও
          এদের মধ্যে পার্থক্য সম্পর্কে জানতে পারলাম, এগুলো নিয়ে কাজ করার সময়
          আমাদের উক্ত বিষয়গুলি খেয়াল রেখেই সঠিকভাবে ব্যবহার করতে হবে নতুবা,
          কাঙ্ক্ষিত ফলাফল না পাওয়া ছাড়াও বিভিন্ন সমস্যার সম্মুখীন হতে হবে।{" "}
        </p>
      </div> */}
    </div>
  );
};

export default FAQ;
